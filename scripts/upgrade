#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
email=$(ynh_app_setting_get --app=$app --key=email)
admin=$(ynh_app_setting_get --app=$app --key=admin)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)
language=$(ynh_app_setting_get --app=$app --key=language)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=2

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=3

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
  db_name=$(ynh_sanitize_dbid --db_name=$app)
  ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Remove files for upgrade compatibilty from previous versions of Friendica
if [ -f $final_path/.htconfig.php ]; then
	ynh_secure_remove "$final_path/.htconfig.php"
fi

if [ -f $final_path/.htconfig.php ]; then
	ynh_secure_remove "$final_path/config/local.ini.php"
fi

# If admin_mail setting doesn't exist, create it
if [ -z $email ]; then
	email=$(ynh_user_get_info --username=$admin --key=mail)
	ynh_app_setting_set --app=$app --key=email --value=$email
fi

# If language setting doesn't exist, create it
if [ -z $language ]; then
  language=en
  ynh_app_setting_set --app=$app --key=language --value=$language
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# SOURCE FILES
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]; then
    ynh_script_progression --message="Upgrading source files..." --weight=3

    pushd "$final_path"
    if [ ! `git rev-parse --is-inside-work-tree &> /dev/null` ]; then
        # If current install is not a Git repo then init one
        git init --quiet
        if ! git config remote.origin.url > /dev/null; then
            # If remote does not exist, add it
            git remote add origin $repo_url
        fi
	git fetch origin --quiet
    	git checkout -b stable --track origin/stable --force --quiet
    fi
    git fetch --quiet
    git checkout stable --quiet
    git pull --quiet
    git reset --hard $version_commit --quiet
    popd
	
    pushd "$final_path/addon"
    if [ ! `git rev-parse --is-inside-work-tree &> /dev/null` ]; then
        # If current install is not a Git repo then init one
        git init --quiet
	if ! git config remote.origin.url > /dev/null; then
	    # If remote does not exist, add it
	    git remote add origin $addons_repo_url
        fi
        git fetch origin --quiet
        git checkout -b stable --track origin/stable --force --quiet
    fi
    git fetch --quiet
    git checkout stable --quiet
    git pull --quiet
    git reset --hard $addons_version_commit --quiet
    popd
fi 

# Copy config file for correct place
#ynh_add_config --template="../conf/local-sample.config.php" --destination="$final_path/config/local.config.php"

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

# Some extra folders
chmod -R 775 "$final_path/view/smarty3"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading PHP-FPM configuration..." --weight=2

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --package="$extra_php_dependencies"

# Run Composer
pushd "$final_path"
    ynh_exec_as "$app" php$phpversion bin/composer.phar install --no-dev --quiet
popd

#=================================================
# CRON CONFIGURATION
#=================================================

ynh_script_progression --message="Upgrading Cron configuration..." --weight=1

ynh_add_config --template="../conf/cron" --destination="/etc/cron.d/$app"
chown root: "/etc/cron.d/$app"
chmod 644 "/etc/cron.d/$app"

#=================================================
# DATABASE STRUCTURE UPDATE
#=================================================

ynh_script_progression --message="Upgrading DB structure..." --weight=4

# Run DB structure update
pushd "$final_path"
    ynh_exec_as "$app" bin/console dbstructure update
    #ynh_exec_as "$app" bin/console config system addon ldapauth
popd

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
