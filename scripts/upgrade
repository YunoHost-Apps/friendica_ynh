#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_composer__2
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --time --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
admin_mail=$(ynh_app_setting_get --app=$app --key=email)
admin=$(ynh_app_setting_get --app=$app --key=admin)

#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --time --weight=1

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --time --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
# N.B. : this is for app installations before YunoHost 2.7
# where this value might be something like /foo/ or foo/
# instead of /foo ....
# If nobody installed your app before 2.7, then you may
# safely remove this line
path_url=$(ynh_normalize_url_path --path_url=$path_url)

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Remove files for upgrade compatibilty from previous versions of Friendica 
if [ -f $final_path/.htconfig.php ]; then
	rm "$final_path/.htconfig.php"
fi

if [ -f $final_path/.htconfig.php ]; then
	rm "$final_path/config/local.ini.php"
fi


# If admin_mail setting doesn't exist, create it
if [ -z $admin_mail ]; then	
	admin_mail=$(sudo yunohost user info $admin | grep "mail:" | cut -d' ' -f2)
	ynh_app_setting_set --app=$app --key=email --value=$admin_mail
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --time --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
	
	#Copy Addons
	rm -Rf "$final_path/addon"
	ynh_setup_source --dest_dir="$final_path/addon" --source_id="addons"
	# 3 - some extra folders
	chmod -R 775 $final_path/view/smarty3
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --time --weight=1

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --time --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --time --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..." --time --weight=1

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# UPGRADE CONFIGURATION
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_backup_if_checksum_is_different --file="$final_path/config/local.config.php"
	# Copy config file for correct place
	cp -f "/var/www/$app/config/local-sample.config.php" "$final_path/config/local.config.php"
	
	# Replace strings in config file
	ynh_replace_string --match_string="your.mysqlhost.com" --replace_string="localhost"                 --target_file="$final_path/config/local.config.php"
	ynh_replace_string --match_string="mysqlusername"      --replace_string="$db_name"                  --target_file="$final_path/config/local.config.php"
	ynh_replace_string --match_string="mysqldatabasename"  --replace_string="$db_name"                  --target_file="$final_path/config/local.config.php"
	ynh_replace_string --match_string="mysqlpassword"      --replace_string="$db_pwd"                  --target_file= "$final_path/config/local.config.php"
	ynh_replace_string --match_string="'admin_email' => '',"      --replace_string="'admin_email' => '$admin_mail'," --target_file="$final_path/config/local.config.php"
	ynh_replace_string --match_string="REGISTER_OPEN"  --replace_string="REGISTER_CLOSED" --target_file="$final_path/config/local.config.php"
	
	ynh_store_file_checksum --file="$final_path/config/local.config.php"
fi


#=================================================
# SETUP CRON JOB
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_replace_string --match_string="__YNH_WWW_PATH__" --replace_string="$final_path" --target_file="../conf/poller-cron"
	ynh_replace_string --match_string="__USER__" --replace_string="$app" --target_file="../conf/poller-cron"
	cp "../conf/poller-cron" "/etc/cron.d/$app"
fi

#=================================================
# INSTALL THE APPLICATION
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_install_composer
	(cd $final_path && sudo bin/console config system addon ldapauth)
fi

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..." --time --weight=1

# unprotected_uris allows SSO credentials to be passed anyway.
ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --time --last
